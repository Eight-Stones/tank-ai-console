// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: probes/v1/probes.proto

package probesv1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProbesService service

func NewProbesServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProbesService service

type ProbesService interface {
	GetHealth(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error)
	GetReady(ctx context.Context, in *ReadyRequest, opts ...client.CallOption) (*ReadyResponse, error)
}

type probesService struct {
	c    client.Client
	name string
}

func NewProbesService(name string, c client.Client) ProbesService {
	return &probesService{
		c:    c,
		name: name,
	}
}

func (c *probesService) GetHealth(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.name, "ProbesService.GetHealth", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probesService) GetReady(ctx context.Context, in *ReadyRequest, opts ...client.CallOption) (*ReadyResponse, error) {
	req := c.c.NewRequest(c.name, "ProbesService.GetReady", in)
	out := new(ReadyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProbesService service

type ProbesServiceHandler interface {
	GetHealth(context.Context, *HealthRequest, *HealthResponse) error
	GetReady(context.Context, *ReadyRequest, *ReadyResponse) error
}

func RegisterProbesServiceHandler(s server.Server, hdlr ProbesServiceHandler, opts ...server.HandlerOption) error {
	type probesService interface {
		GetHealth(ctx context.Context, in *HealthRequest, out *HealthResponse) error
		GetReady(ctx context.Context, in *ReadyRequest, out *ReadyResponse) error
	}
	type ProbesService struct {
		probesService
	}
	h := &probesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProbesService{h}, opts...))
}

type probesServiceHandler struct {
	ProbesServiceHandler
}

func (h *probesServiceHandler) GetHealth(ctx context.Context, in *HealthRequest, out *HealthResponse) error {
	return h.ProbesServiceHandler.GetHealth(ctx, in, out)
}

func (h *probesServiceHandler) GetReady(ctx context.Context, in *ReadyRequest, out *ReadyResponse) error {
	return h.ProbesServiceHandler.GetReady(ctx, in, out)
}
